"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZoomOutToolbar;
var _clsx = _interopRequireDefault(require("clsx"));
var _icons = require("@wordpress/icons");
var _components = require("@wordpress/components");
var _data = require("@wordpress/data");
var _blocks = require("@wordpress/blocks");
var _i18n = require("@wordpress/i18n");
var _store = require("../../store");
var _blockDraggable = _interopRequireDefault(require("../block-draggable"));
var _blockMover = _interopRequireDefault(require("../block-mover"));
var _shuffle = _interopRequireDefault(require("../block-toolbar/shuffle"));
var _navigableToolbar = _interopRequireDefault(require("../navigable-toolbar"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ZoomOutToolbar({
  clientId,
  rootClientId
}) {
  const selected = (0, _data.useSelect)(select => {
    const {
      getBlock,
      hasBlockMovingClientId,
      getNextBlockClientId,
      getPreviousBlockClientId,
      canRemoveBlock,
      canMoveBlock
    } = select(_store.store);
    const {
      getBlockType
    } = select(_blocks.store);
    const {
      name
    } = getBlock(clientId);
    const blockType = getBlockType(name);
    const isBlockTemplatePart = blockType?.name === 'core/template-part';
    let isNextBlockTemplatePart = false;
    const nextClientId = getNextBlockClientId();
    if (nextClientId) {
      const {
        name: nextName
      } = getBlock(nextClientId);
      const nextBlockType = getBlockType(nextName);
      isNextBlockTemplatePart = nextBlockType?.name === 'core/template-part';
    }
    let isPrevBlockTemplatePart = false;
    const prevClientId = getPreviousBlockClientId();
    if (prevClientId) {
      const {
        name: prevName
      } = getBlock(prevClientId);
      const prevBlockType = getBlockType(prevName);
      isPrevBlockTemplatePart = prevBlockType?.name === 'core/template-part';
    }
    return {
      blockMovingMode: hasBlockMovingClientId(),
      isBlockTemplatePart,
      isNextBlockTemplatePart,
      isPrevBlockTemplatePart,
      canRemove: canRemoveBlock(clientId, rootClientId),
      canMove: canMoveBlock(clientId, rootClientId)
    };
  }, [clientId, rootClientId]);
  const {
    blockMovingMode,
    isBlockTemplatePart,
    isNextBlockTemplatePart,
    isPrevBlockTemplatePart,
    canRemove,
    canMove
  } = selected;
  const {
    removeBlock
  } = (0, _data.useDispatch)(_store.store);
  const classNames = (0, _clsx.default)('zoom-out-toolbar', {
    'is-block-moving-mode': !!blockMovingMode
  });
  const showBlockDraggable = canMove && !isBlockTemplatePart;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_navigableToolbar.default, {
    className: classNames
    /* translators: accessibility text for the block toolbar */,
    "aria-label": (0, _i18n.__)('Block tools')
    // The variant is applied as "toolbar" when undefined, which is the black border style of the dropdown from the toolbar popover.
    ,
    variant: "unstyled",
    orientation: "vertical",
    children: [showBlockDraggable && /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockDraggable.default, {
      clientIds: [clientId],
      children: draggableProps => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
        icon: _icons.dragHandle,
        className: "block-selection-button_drag-handle zoom-out-toolbar-button",
        "aria-hidden": "true",
        label: (0, _i18n.__)('Drag'),
        iconSize: 24,
        size: "compact"
        // Should not be able to tab to drag handle as this
        // button can only be used with a pointer device.
        ,
        tabIndex: "-1",
        ...draggableProps
      })
    }), !isBlockTemplatePart && /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockMover.default, {
      clientIds: [clientId],
      hideDragHandle: true,
      isBlockMoverUpButtonDisabled: isPrevBlockTemplatePart,
      isBlockMoverDownButtonDisabled: isNextBlockTemplatePart,
      iconSize: 24,
      size: "compact"
    }), canMove && canRemove && /*#__PURE__*/(0, _jsxRuntime.jsx)(_shuffle.default, {
      clientId: clientId,
      as: _components.ToolbarButton
    }), canRemove && !isBlockTemplatePart && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.ToolbarButton, {
      className: "zoom-out-toolbar-button",
      icon: _icons.trash,
      label: (0, _i18n.__)('Delete'),
      onClick: () => {
        removeBlock(clientId);
      }
    })]
  });
}
//# sourceMappingURL=zoom-out-toolbar.js.map