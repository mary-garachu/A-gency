"use strict";

var _compose = require("@wordpress/compose");
var _hooks = require("@wordpress/hooks");
var _data = require("@wordpress/data");
var _grid = require("../components/grid");
var _store = require("../store");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function GridLayoutSync(props) {
  (0, _grid.useGridLayoutSync)(props);
}
function GridTools({
  clientId,
  layout
}) {
  const {
    isSelected,
    isDragging
  } = (0, _data.useSelect)(select => {
    const {
      isBlockSelected,
      isDraggingBlocks
    } = select(_store.store);
    return {
      isSelected: isBlockSelected(clientId),
      isDragging: isDraggingBlocks()
    };
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(GridLayoutSync, {
      clientId: clientId
    }), (isSelected || isDragging) && /*#__PURE__*/(0, _jsxRuntime.jsx)(_grid.GridVisualizer, {
      clientId: clientId,
      parentLayout: layout
    })]
  });
}
const addGridVisualizerToBlockEdit = (0, _compose.createHigherOrderComponent)(BlockEdit => props => {
  if (props.attributes.layout?.type !== 'grid') {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(BlockEdit, {
      ...props
    }, "edit");
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(GridTools, {
      clientId: props.clientId,
      layout: props.attributes.layout
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(BlockEdit, {
      ...props
    }, "edit")]
  });
}, 'addGridVisualizerToBlockEdit');
(0, _hooks.addFilter)('editor.BlockEdit', 'core/editor/grid-visualizer', addGridVisualizerToBlockEdit);
//# sourceMappingURL=grid-visualizer.js.map