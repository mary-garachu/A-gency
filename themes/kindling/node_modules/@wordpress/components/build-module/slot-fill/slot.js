/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
import { useContext, useEffect, useReducer, useRef, Children, cloneElement, isEmptyElement } from '@wordpress/element';

/**
 * Internal dependencies
 */
import SlotFillContext from './context';
import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
/**
 * Whether the argument is a function.
 *
 * @param maybeFunc The argument to check.
 * @return True if the argument is a function, false otherwise.
 */
function isFunction(maybeFunc) {
  return typeof maybeFunc === 'function';
}
function Slot(props) {
  var _registry$getFills;
  const registry = useContext(SlotFillContext);
  const [, rerender] = useReducer(() => [], []);
  const ref = useRef({
    rerender
  });
  const {
    name,
    children,
    fillProps = {}
  } = props;
  useEffect(() => {
    const refValue = ref.current;
    registry.registerSlot(name, refValue);
    return () => registry.unregisterSlot(name, refValue);
  }, [registry, name]);
  const fills = ((_registry$getFills = registry.getFills(name, ref.current)) !== null && _registry$getFills !== void 0 ? _registry$getFills : []).map(fill => {
    const fillChildren = isFunction(fill.children) ? fill.children(fillProps) : fill.children;
    return Children.map(fillChildren, (child, childIndex) => {
      if (!child || typeof child === 'string') {
        return child;
      }
      let childKey = childIndex;
      if (typeof child === 'object' && 'key' in child && child?.key) {
        childKey = child.key;
      }
      return cloneElement(child, {
        key: childKey
      });
    });
  }).filter(
  // In some cases fills are rendered only when some conditions apply.
  // This ensures that we only use non-empty fills when rendering, i.e.,
  // it allows us to render wrappers only when the fills are actually present.
  element => !isEmptyElement(element));
  return /*#__PURE__*/_jsx(_Fragment, {
    children: isFunction(children) ? children(fills) : fills
  });
}
export default Slot;
//# sourceMappingURL=slot.js.map