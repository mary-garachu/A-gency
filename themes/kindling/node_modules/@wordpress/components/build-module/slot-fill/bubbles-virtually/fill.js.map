{"version":3,"names":["useObservableValue","useContext","useReducer","useRef","useEffect","createPortal","SlotFillContext","StyleProvider","jsx","_jsx","Fill","name","children","_slot$fillProps","registry","slot","slots","rerender","ref","refValue","current","registerFill","unregisterFill","wrappedChildren","document","ownerDocument","fillProps"],"sources":["@wordpress/components/src/slot-fill/bubbles-virtually/fill.tsx"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useObservableValue } from '@wordpress/compose';\nimport {\n\tuseContext,\n\tuseReducer,\n\tuseRef,\n\tuseEffect,\n\tcreatePortal,\n} from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport SlotFillContext from './slot-fill-context';\nimport StyleProvider from '../../style-provider';\nimport type { FillComponentProps } from '../types';\n\nexport default function Fill( { name, children }: FillComponentProps ) {\n\tconst registry = useContext( SlotFillContext );\n\tconst slot = useObservableValue( registry.slots, name );\n\tconst [ , rerender ] = useReducer( () => [], [] );\n\tconst ref = useRef( { rerender } );\n\n\tuseEffect( () => {\n\t\t// We register fills so we can keep track of their existence.\n\t\t// Some Slot implementations need to know if there're already fills\n\t\t// registered so they can choose to render themselves or not.\n\t\tconst refValue = ref.current;\n\t\tregistry.registerFill( name, refValue );\n\t\treturn () => {\n\t\t\tregistry.unregisterFill( name, refValue );\n\t\t};\n\t}, [ registry, name ] );\n\n\tif ( ! slot || ! slot.ref.current ) {\n\t\treturn null;\n\t}\n\n\t// When using a `Fill`, the `children` will be rendered in the document of the\n\t// `Slot`. This means that we need to wrap the `children` in a `StyleProvider`\n\t// to make sure we're referencing the right document/iframe (instead of the\n\t// context of the `Fill`'s parent).\n\tconst wrappedChildren = (\n\t\t<StyleProvider document={ slot.ref.current.ownerDocument }>\n\t\t\t{ typeof children === 'function'\n\t\t\t\t? children( slot.fillProps ?? {} )\n\t\t\t\t: children }\n\t\t</StyleProvider>\n\t);\n\n\treturn createPortal( wrappedChildren, slot.ref.current );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,kBAAkB,QAAQ,oBAAoB;AACvD,SACCC,UAAU,EACVC,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,YAAY,QACN,oBAAoB;;AAE3B;AACA;AACA;AACA,OAAOC,eAAe,MAAM,qBAAqB;AACjD,OAAOC,aAAa,MAAM,sBAAsB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAGjD,eAAe,SAASC,IAAIA,CAAE;EAAEC,IAAI;EAAEC;AAA6B,CAAC,EAAG;EAAA,IAAAC,eAAA;EACtE,MAAMC,QAAQ,GAAGb,UAAU,CAAEK,eAAgB,CAAC;EAC9C,MAAMS,IAAI,GAAGf,kBAAkB,CAAEc,QAAQ,CAACE,KAAK,EAAEL,IAAK,CAAC;EACvD,MAAM,GAAIM,QAAQ,CAAE,GAAGf,UAAU,CAAE,MAAM,EAAE,EAAE,EAAG,CAAC;EACjD,MAAMgB,GAAG,GAAGf,MAAM,CAAE;IAAEc;EAAS,CAAE,CAAC;EAElCb,SAAS,CAAE,MAAM;IAChB;IACA;IACA;IACA,MAAMe,QAAQ,GAAGD,GAAG,CAACE,OAAO;IAC5BN,QAAQ,CAACO,YAAY,CAAEV,IAAI,EAAEQ,QAAS,CAAC;IACvC,OAAO,MAAM;MACZL,QAAQ,CAACQ,cAAc,CAAEX,IAAI,EAAEQ,QAAS,CAAC;IAC1C,CAAC;EACF,CAAC,EAAE,CAAEL,QAAQ,EAAEH,IAAI,CAAG,CAAC;EAEvB,IAAK,CAAEI,IAAI,IAAI,CAAEA,IAAI,CAACG,GAAG,CAACE,OAAO,EAAG;IACnC,OAAO,IAAI;EACZ;;EAEA;EACA;EACA;EACA;EACA,MAAMG,eAAe,gBACpBd,IAAA,CAACF,aAAa;IAACiB,QAAQ,EAAGT,IAAI,CAACG,GAAG,CAACE,OAAO,CAACK,aAAe;IAAAb,QAAA,EACvD,OAAOA,QAAQ,KAAK,UAAU,GAC7BA,QAAQ,EAAAC,eAAA,GAAEE,IAAI,CAACW,SAAS,cAAAb,eAAA,cAAAA,eAAA,GAAI,CAAC,CAAE,CAAC,GAChCD;EAAQ,CACG,CACf;EAED,OAAOP,YAAY,CAAEkB,eAAe,EAAER,IAAI,CAACG,GAAG,CAACE,OAAQ,CAAC;AACzD","ignoreList":[]}